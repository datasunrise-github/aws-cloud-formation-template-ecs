AWSTemplateFormatVersion: 2010-09-09
Description: DataSunrise ECS Fargate

Mappings:
  Consts:
    V1:
      pgPort: '5432'
      myPort: '3306'
      msPort: '1433'
      AuditInternalParameterPg: '1'
      AuditInternalParameterMy: '2'
      AuditInternalParameterMs: '6'
      DictionaryInternalParameterPg: postgresql
      DictionaryInternalParameterMy: mysql
      DictionaryInternalParameterMs: mssql
      DictionaryEnginePg: postgres
      DictionaryEngineMy: mysql
      DictionaryEngineMs: sqlserver-ex
      AuditEnginePg: postgres
      AuditEngineMy: mysql
      AuditEngineMs: sqlserver-se
      EngineVersionPg: '11.6'
      EngineVersionMy: '5.7.22'
      EngineVersionMs: '14.00.3281.6.v1'
      AuditAuroraEnginePg: aurora-postgresql
      AuditAuroraEngineMy: aurora-mysql
      AuditAuroraEngineVersionPg: '11.6'
      AuditAuroraEngineVersionMy: '5.7.12'
      ParameterGroupFamilyPg: 'postgres11'
      ParameterGroupFamilyMy: 'MySQL5.7'
      DictionaryParameterGroupFamilyMs: 'sqlserver-ex-14.0'
      AuditParameterGroupFamilyMs: 'sqlserver-se-14.0'
      ParameterGroupFamilyPgCluster: aurora-postgresql11
      ParameterGroupFamilyMyCluster: aurora-mysql5.7
      PostgresLicenseModel: 'postgresql-license'
      MysqlLicenseModel: 'general-public-license'
      MssqlLicenseModel: 'license-included'

Parameters:
  DictionaryType:
    Type: String
    Default: Postgres
    AllowedValues:
      - Postgres
      - MySQL
 #     - MSSQL
  AuditType:
    Type: String
    Default: Postgres
    AllowedValues:
      - Postgres
      - MySQL
#      - MSSQL
      - AuroraPostgres
      - AuroraMySQL
  DBUser:
    Type: String
    Description: >-
      The database administrator account username. Must begin with a letter and
      contain only alphanumeric characters.
    Default: dsuser
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters
  DBPassword:
    NoEcho: 'true'
    Type: String
    Description: The database administrator account password.
    MinLength: '8'
    MaxLength: '41'
  DictionaryDBClass:
    Type: String
    Description: >-
      The database instance class that allocates the computational, network, and
      memory capacity required by planned workload of this database instance.
    Default: db.t3.medium
    AllowedValues:
      - db.t3.small
      - db.t3.medium
      - dt.t3.large
      - db.t3.xlarge
      - db.t3.2xlarge
      - db.m5.large
      - db.m5.xlarge
      - db.m5.2xlarge
      - db.m5.4xlarge
      - db.m5.12xlarge
      - db.m5.24xlarge
      - db.r5.large
      - db.r5.xlarge
      - db.r5.2xlarge
      - db.r5.4xlarge
      - db.r5.12xlarge
      - db.r5.24xlarge
  DBDictName:
    Type: String
    Description: >-
      Name of the database to store DataSunrise configuration. Must begin with a
      letter and contain only alphanumeric characters.
    Default: dsdictionary
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters
  MultiAzDictionary:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Dictionary RDS Multi-AZ
    Type: String
  DictionaryDBStorageSize:
    Type: Number
    Default: '20'
    Description: 'The size of the database (Gb), minimum restriction by AWS is 20GB'
    MinValue: '20'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
  AuditDBClass:
    Type: String
    Description: >-
      The database instance class that allocates the computational, network, and
      memory capacity required by planned workload of this database instance.
    Default: 4xlarge
    AllowedValues:
      - xlarge
      - 2xlarge
      - 4xlarge
      - 8xlarge
      - 12xlarge
      - 16xlarge
      - 24xlarge
  DBAuditName:
    Type: String
    Description: >-
      Name of the database to store DataSunrise audit journal. Must begin with a
      letter and contain only alphanumeric characters.
    Default: dsaudit
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters
  AuditDBStorageSize:
    Type: Number
    Default: '200'
    Description: 'The size of the database (Gb), minimum restriction by AWS is 20GB'
    MinValue: '20'
    MaxValue: '1024'
    ConstraintDescription: must be between 20 and 1024Gb.
  MultiAzAudit:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Make Audit RDS Multi-AZ
    Type: String
  SubnetsConfig:
    Type: List<AWS::EC2::Subnet::Id>
    Description: >-
      Dictionary and Audit subnets. Must be a part of mentioned VPC. Please be sure
      that you select at least two subnets.
    ConstraintDescription: must be the subnet Id of an existing subnet in mentioned VPC.
    AllowedPattern: .+
  EnableSSHServer:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Enable SSH connect
    Type: String
  SshPassword:
    Description: (Optional if EnableSSHServer equals false) Enter password for ssh connect
    Type: String
  BucketName:
    Type: String
    Description: >-
      (Optional) Name of the S3 bucket for DataSunrise logs. If empty,
      the backup uploading will not be configured.

  # CONTAINER ONLY
  VPC:
    Type: AWS::EC2::VPC::Id
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  Certificate:
    Type: String
    # Update with the certificate ARN from Certificate Manager, which must exist in the same region.
    Default: 'arn:aws:acm:region:accountid:certificate/certificateid'
  Image:
    Type: String
    # Update with the Docker image. "You can use images in the Docker Hub registry or specify other repositories (repository-url/image:tag)."
    #Default: 123456789012.dkr.ecr.region.amazonaws.com/image:tag
    Default: datasunrise/datasunrise:latest
  ContainerPort:
    Type: Number
    Default: 443
  ContainerProxyPort:
    Type: Number
    Description: If container will be used as proxy - specify a port number that will be used for proxy.
  ContainersCount:
    Type: Number
    Default: 2
  VpcCidr:
    Type: String
    Default: 172.31.0.0/16
  UserLocationCIDR:
    Type: String
    Default: 0.0.0.0/0
  ContainerCpu:
    Type: Number
    Default: 2048
    AllowedValues:
      - 512
      - 1024
      - 2048
      - 4096
  ContainerMemory:
    Type: String
    Default: 4GB
    Description: >
      - "1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)"
      - "2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)"
      - "Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)"
      - "Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)"


Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - UserLocationCIDR
      - Label:
          default: Dictionary & Audit Database Configuration
        Parameters:
          - DictionaryType
          - DictionaryDBClass
          - DictionaryDBStorageSize
          - DBDictName
          - MultiAzDictionary
          - AuditType
          - AuditDBClass
          - AuditDBStorageSize
          - DBAuditName
          - MultiAzAudit
          - DBUser
          - DBPassword
          - SubnetsConfig
          - EnableSSHServer
          - SshPassword
          - BucketName

Conditions:
  HasS3Name: !Not [!Equals ['', !Ref BucketName]]
  #HasS3Name: !Not [!Equals ['', !Ref BackupS3BucketName]]
  #HasNoAlarm: !Equals ['', !Ref AlarmEmail]
  #HasAlarm: !Not [!Equals ['', !Ref AlarmEmail]]
  #HasBucketKeyARN: !Not [!Equals ['', !Ref BucketKeyARN]]
  DictionaryPostgres: !Equals [ !Ref DictionaryType, 'Postgres']
  DictionaryMysql: !Equals [!Ref DictionaryType, 'MySQL']
  DictionaryMssql: !Equals [!Ref DictionaryType, 'MSSQL']
  AuditPostgres: !Equals [ !Ref AuditType, 'Postgres']
  AuditMysql: !Equals [!Ref AuditType, 'MySQL']
  AuditMssql: !Equals [!Ref AuditType, 'MSSQL']
  AuditAuroraPostgres: !Equals [ !Ref AuditType, 'AuroraPostgres']
  AuditAuroraMysql: !Equals [!Ref AuditType, 'AuroraMySQL']
  ParameterGroupPg: !Or [!Equals [!Ref DictionaryType, 'Postgres'],!Equals [ !Ref AuditType, 'Postgres']]
  ParameterGroupMy: !Or [!Equals [!Ref DictionaryType, 'MySQL'], !Equals [ !Ref AuditType, 'MySQL']]
  ParameterGroupMsDictionary: !Equals [!Ref DictionaryType, 'MSSQL']
  ParameterGroupMsAudit: !Equals [!Ref DictionaryType, 'MSSQL']
  isAuroraCluster: !Or [!Equals [!Ref AuditType, 'AuroraPostgres'],!Equals [ !Ref AuditType, 'AuroraMySQL']]
  isNotAuroraCluster: !Not [!Or [!Equals [!Ref AuditType, 'AuroraPostgres'],!Equals [ !Ref AuditType, 'AuroraMySQL']]]
  #s3link: !Equals [!Select [0, !Split ['//', !Ref DSDistributionUrl]], 's3:']
  isProxyPort: !Not [!Equals ['', !Ref ContainerProxyPort]]

Resources:
  DSDBSubnetGrp:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: RDS database subnet group for DataSunrise configuration and audit storage.
      DBSubnetGroupName: !Join [ '', [ !Ref 'AWS::StackName', '-dbsubnetgrp' ] ]
      SubnetIds: !Ref SubnetsConfig

  DSConfigSG:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn:
      - ContainerSecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Join [ '', [ !Ref 'AWS::StackName', '-DataSunrise-Config-SG' ] ]
      GroupDescription: Enables DataSunrise nodes access to dictionary/audit RDS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !If [ DictionaryPostgres, !FindInMap [ Consts, V1, pgPort ], !If [ DictionaryMysql, !FindInMap [ Consts, V1, myPort ], !FindInMap [ Consts, V1, msPort ] ] ]
          ToPort: !If [ DictionaryPostgres, !FindInMap [ Consts, V1, pgPort ], !If [ DictionaryMysql, !FindInMap [ Consts, V1, myPort ], !FindInMap [ Consts, V1, msPort ] ] ]
          SourceSecurityGroupId: !GetAtt ContainerSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Join [ '', [ !Ref 'AWS::StackName', '-DataSunrise-EC2-Config-SG' ] ]

  DSConfigSGIngressRuleAudit:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn:
      - DSConfigSG
      - ContainerSecurityGroup
    Properties:
      GroupId: !GetAtt DSConfigSG.GroupId
      IpProtocol: tcp
      FromPort: !If [ AuditPostgres, !FindInMap [ Consts, V1, pgPort ], !If [ AuditMysql, !FindInMap [ Consts, V1, myPort ], !If [ AuditMssql, !FindInMap [ Consts, V1, msPort ], !If [ AuditAuroraPostgres, !FindInMap [ Consts, V1, pgPort ], !FindInMap [ Consts, V1, myPort ] ] ] ] ]
      ToPort: !If [ AuditPostgres, !FindInMap [ Consts, V1, pgPort ], !If [ AuditMysql, !FindInMap [ Consts, V1, myPort ], !If [ AuditMssql, !FindInMap [ Consts, V1, msPort ], !If [ AuditAuroraPostgres, !FindInMap [ Consts, V1, pgPort ], !FindInMap [ Consts, V1, myPort ] ] ] ] ]
      SourceSecurityGroupId: !GetAtt ContainerSecurityGroup.GroupId

  DSDictionaryDB:
    Type: 'AWS::RDS::DBInstance'
    DependsOn:
      - DSDBSubnetGrp
      - DSConfigSG
    Properties:
      DBInstanceIdentifier: !Join [ '', [ !Ref 'AWS::StackName', '-dictionary' ] ]
      Engine: !If [ DictionaryPostgres, !FindInMap [ Consts, V1, DictionaryEnginePg ], !If [ DictionaryMysql, !FindInMap [ Consts, V1, DictionaryEngineMy ], !FindInMap [ Consts, V1, DictionaryEngineMs ] ] ]
      Port: !If [ DictionaryPostgres, !FindInMap [ Consts, V1, pgPort ], !If [ DictionaryMysql, !FindInMap [ Consts, V1, myPort ], !FindInMap [ Consts, V1, msPort ] ] ]
      EngineVersion: !If [ DictionaryPostgres, !FindInMap [ Consts, V1, EngineVersionPg ], !If [ DictionaryMysql, !FindInMap [ Consts, V1, EngineVersionMy ], !FindInMap [ Consts, V1, EngineVersionMs ] ] ]
      DBInstanceClass: !Ref DictionaryDBClass
      DBName: !If [ DictionaryMssql, !Ref 'AWS::NoValue', !Ref DBDictName ]
      MultiAZ: !Ref MultiAzDictionary
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: !Ref DictionaryDBStorageSize
      VPCSecurityGroups:
        - !Ref DSConfigSG
      DBSubnetGroupName: !Ref DSDBSubnetGrp
      DBParameterGroupName: !If [ DictionaryPostgres, !Ref DSParameterGroupPostgres, !If [ DictionaryMysql, !Ref DSParameterGroupMysql, !Ref DSParameterGroupMssqlDictionary ] ]
      StorageEncrypted: !If [ DictionaryMssql, !Ref 'AWS::NoValue', 'True' ]
      StorageType: gp2
      LicenseModel: !If [ DictionaryPostgres, !FindInMap [ Consts, V1, PostgresLicenseModel ], !If [ DictionaryMysql, !FindInMap [ Consts, V1, MysqlLicenseModel ], !FindInMap [ Consts, V1, MssqlLicenseModel ] ] ]
    DeletionPolicy: Snapshot
  DSAuditDB:
    Condition: isNotAuroraCluster
    Type: 'AWS::RDS::DBInstance'
    DependsOn:
      - DSDBSubnetGrp
      - DSConfigSG
    Properties:
      DBInstanceIdentifier: !Join [ '', [ !Ref 'AWS::StackName', '-audit' ] ]
      Engine: !If [ AuditPostgres, !FindInMap [ Consts, V1, AuditEnginePg ], !If [ AuditMysql, !FindInMap [ Consts, V1, AuditEngineMy ], !FindInMap [ Consts, V1, AuditEngineMs ] ] ]
      Port: !If [ AuditPostgres, !FindInMap [ Consts, V1, pgPort ], !If [ AuditMysql, !FindInMap [ Consts, V1, myPort ], !If [ AuditMssql, !FindInMap [ Consts, V1, msPort ], !If [ AuditAuroraPostgres, !FindInMap [ Consts, V1, pgPort ], !FindInMap [ Consts, V1, myPort ] ] ] ] ]
      EngineVersion: !If [ AuditPostgres, !FindInMap [ Consts, V1, EngineVersionPg ], !If [ AuditMysql, !FindInMap [ Consts, V1, EngineVersionMy ], !FindInMap [ Consts, V1, EngineVersionMs ] ] ]
      DBInstanceClass: !Join [ '', [ 'db.m5.', !Ref AuditDBClass ] ]
      DBName: !If [ AuditMssql, !Ref 'AWS::NoValue', !Ref DBAuditName ]
      #MSSQL DOENST HAVE A NAME FOR DB SHOULD BE AWS::NOVALUE IN CASE ITS MSSQL
      MultiAZ: !Ref MultiAzAudit
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: !Ref AuditDBStorageSize
      VPCSecurityGroups:
        - !Ref DSConfigSG
      DBSubnetGroupName: !Ref DSDBSubnetGrp
      DBParameterGroupName: !If [ AuditPostgres, !Ref DSParameterGroupPostgres, !If [ AuditMysql, !Ref DSParameterGroupMysql, !Ref DSParameterGroupMssqlAudit ] ]
      StorageEncrypted: 'True'
      StorageType: gp2
      MaxAllocatedStorage: !If [ AuditMssql, 16384, 65536 ]
      LicenseModel: !If [ AuditPostgres, !FindInMap [ Consts, V1, PostgresLicenseModel ], !If [ AuditMysql, !FindInMap [ Consts, V1, MysqlLicenseModel ], !FindInMap [ Consts, V1, MssqlLicenseModel ] ] ]
    DeletionPolicy: Snapshot
  DSAuditDBCluster:
    Condition: isAuroraCluster
    Type: AWS::RDS::DBCluster
    Properties:
      DatabaseName: !Ref DBAuditName
      Engine: !If [ AuditAuroraPostgres, !FindInMap [ Consts, V1, AuditAuroraEnginePg ], !FindInMap [ Consts, V1, AuditAuroraEngineMy ] ]
      EngineVersion: !If [ AuditAuroraPostgres, !FindInMap [ Consts, V1, AuditAuroraEngineVersionPg ], !FindInMap [ Consts, V1, AuditAuroraEngineVersionMy ] ]
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DSDBSubnetGrp
      VpcSecurityGroupIds:
        - Ref: DSConfigSG
      DBClusterParameterGroupName: !If [ AuditAuroraPostgres, !Ref DSParameterGroupPostgresCluster, !Ref DSParameterGroupMysqlCluster ]
      DBClusterIdentifier: !Join [ '', [ !Ref 'AWS::StackName', '-dsauditCluster' ] ]
      Port: !If [ AuditAuroraPostgres, !FindInMap [ Consts, V1, pgPort ], !FindInMap [ Consts, V1, myPort ] ]
      StorageEncrypted: 'True'
  DSAuditDBClusterNode:
    Condition: isAuroraCluster
    Type: 'AWS::RDS::DBInstance'
    DependsOn:
      - DSDBSubnetGrp
      - DSConfigSG
    Properties:
      DBClusterIdentifier: !Ref DSAuditDBCluster
      Engine: !If [ AuditAuroraPostgres, !FindInMap [ Consts, V1, AuditAuroraEnginePg ], !FindInMap [ Consts, V1, AuditAuroraEngineMy ] ]
      DBInstanceClass: !Join [ '', [ 'db.r5.', !Ref AuditDBClass ] ]
      DBSubnetGroupName: !Ref DSDBSubnetGrp
      DBInstanceIdentifier: !Join [ '', [ !Ref 'AWS::StackName', '-dsauditnode' ] ]
  DSParameterGroupPostgres:
    Condition: ParameterGroupPg
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Parameters:
        rds.force_ssl: '1'
      Description: DSParameterGroup
      Family: !FindInMap [ Consts, V1, ParameterGroupFamilyPg ]
  DSParameterGroupMysql:
    Condition: ParameterGroupMy
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Parameters:
        character_set_server: utf8mb4
        collation_server: utf8mb4_bin
        character_set_database: utf8mb4
        log_bin_trust_function_creators: '1'
      Description: DSParameterGroup
      Family: !FindInMap [ Consts, V1, ParameterGroupFamilyMy ]
  DSParameterGroupMssqlAudit:
    Condition: AuditMssql
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Parameters:
        rds.force_ssl: '1'
      Description: DSParameterGroup
      Family: !FindInMap [ Consts, V1, AuditParameterGroupFamilyMs ]
  DSParameterGroupMssqlDictionary:
    Condition: DictionaryMssql
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Parameters:
        rds.force_ssl: '1'
      Description: DSParameterGroup
      Family: !FindInMap [ Consts, V1, DictionaryParameterGroupFamilyMs ]
  DSParameterGroupPostgresCluster:
    Condition: AuditAuroraPostgres
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Parameters:
        rds.force_ssl: '1'
      Description: DSParameterGroup
      Family: !FindInMap [ Consts, V1, ParameterGroupFamilyPgCluster ]
  DSParameterGroupMysqlCluster:
    Condition: AuditAuroraMysql
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Parameters:
        character_set_server: utf8mb4
        collation_server: utf8mb4_bin
        character_set_database: utf8mb4
        log_bin_trust_function_creators: '1'
      Description: DSParameterGroup
      Family: !FindInMap [ Consts, V1, ParameterGroupFamilyMyCluster ]

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref 'AWS::StackName', Cluster]]

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: LogGroup
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Join ['', [!Ref 'AWS::StackName', TaskDefinition]]
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: !Ref ContainerCpu
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: !Ref ContainerMemory
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref 'AWS::StackName'
          Image: !Ref Image
          PortMappings:
            - ContainerPort: !Ref ContainerPort
            - ContainerPort: !If [isProxyPort, !Ref ContainerProxyPort, !Ref 'AWS::NoValue']
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
          Cpu: !Ref ContainerCpu
          Environment:
            - Name: DICTIONARY_TYPE
              Value: !If [DictionaryPostgres, !FindInMap [Consts, V1, DictionaryInternalParameterPg], !If [DictionaryMysql, !FindInMap [Consts, V1, DictionaryInternalParameterMy], !FindInMap [Consts, V1, DictionaryInternalParameterMs]]]
            - Name: DICTIONARY_HOST
              Value: !GetAtt DSDictionaryDB.Endpoint.Address
            - Name: DICTIONARY_PORT
              Value: !If [DictionaryPostgres, !FindInMap [Consts, V1, pgPort], !If [DictionaryMysql, !FindInMap [Consts, V1, myPort], !FindInMap [Consts, V1, msPort]]]
            - Name: DICTIONARY_DB_NAME
              Value: !Ref DBDictName
            - Name: DICTIONARY_LOGIN
              Value: !Ref DBUser
            - Name: DICTIONARY_PASS
              Value: !Ref DBPassword
            - Name: AUDIT_TYPE
              Value: !If [AuditPostgres, !FindInMap [Consts, V1, AuditInternalParameterPg], !If [AuditMysql, !FindInMap [Consts, V1, AuditInternalParameterMy], !If [AuditMssql, !FindInMap [Consts, V1, AuditInternalParameterMs], !If [AuditAuroraPostgres, !FindInMap [Consts, V1, AuditInternalParameterPg], !FindInMap [Consts, V1, AuditInternalParameterMy]]]]]
            - Name: AUDIT_HOST
              Value: !If [isAuroraCluster, !GetAtt DSAuditDBCluster.Endpoint.Address, !GetAtt DSAuditDB.Endpoint.Address]
            - Name: AUDIT_PORT
              Value: !If [AuditPostgres, !FindInMap [Consts, V1, pgPort], !If [AuditMysql, !FindInMap [Consts, V1, myPort], !If [AuditMssql, !FindInMap [Consts, V1, msPort], !If [AuditAuroraPostgres, !FindInMap [Consts, V1, pgPort], !FindInMap [Consts, V1, myPort]]]]]
            - Name: AUDIT_DB_NAME
              Value: !Ref DBAuditName
            - Name: AUDIT_LOGIN
              Value: !Ref DBUser
            - Name: AUDIT_PASS
              Value: !Ref DBPassword
            - Name: BACKEND_PORT
              Value: !Ref ContainerPort
            - Name: ENABLE_SSH_SERVER
              Value: !Ref EnableSSHServer
            - Name: SSH_PASS
              Value: !Ref SshPassword
            - Name: BUCKET_NAME
              Value: !Ref BucketName
            - Name: UPLOAD_LOGS_ON_SHUTDOWN
              Value: '1'

  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref 'AWS::StackName', ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref 'AWS::StackName', TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      # ManagedPolicyArns:
      #   -
      # Policies:
      #   -

  # A role needed for auto scaling
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref 'AWS::StackName', AutoScalingRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref 'AWS::StackName', ContainerSecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref UserLocationCIDR
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: !Ref VpcCidr

  ProxyPortIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn:
      - ContainerSecurityGroup
    Condition: isProxyPort
    Properties:
      GroupId: !GetAtt ContainerSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref ContainerProxyPort
      ToPort: !Ref ContainerProxyPort
      CidrIp: !Ref UserLocationCIDR

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref 'AWS::StackName', LoadBalancerSecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: !Ref UserLocationCIDR

  Service:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    DependsOn:
      - ListenerHTTPS
    Properties:
      ServiceName: !Ref 'AWS::StackName'
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 2
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets: !Ref Subnets
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref 'AWS::StackName'
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: '/healthcheck/general'
      Name: !Join ['', [!Ref 'AWS::StackName', TargetGroup]]
      Port: !Ref ContainerPort
      Protocol: HTTPS
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 86500
      TargetType: ip
      VpcId: !Ref VPC

  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref ContainerPort
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      Name: !Join ['', [!Ref 'AWS::StackName', LoadBalancer]]
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref Subnets

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ds-ecs/, !Ref 'AWS::StackName', TaskDefinition]]

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref ContainersCount
      MaxCapacity: !Ref ContainersCount
      ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!Ref 'AWS::StackName', AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: 80

  S3AccessPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Condition: HasS3Name
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:HeadBucket'
              - 's3:GetObject*'
              - 's3:PutObject*'
              - 's3:List*'
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref BucketName,'/*']]
              - !Join ['', ['arn:aws:s3:::', !Ref BucketName]]

Outputs:
  DatasunriseConsoleURL:
    Description: Click to proceed to the DataSunrise Console
    Value: !Join [ '', [ 'https://', !GetAtt LoadBalancer.DNSName] ]